- Ouvrez un terminal
- Créez et entrez dans le dossier TP1_DVC
mkdir TP1_DVC
cd TP1_DVC
- Tapez 'git init' puis 'dvc init'
- Créez le répertoire data avec : 
mkdir data
- Récupérez le dataset avec:
dvc get https://github.com/mtaileb/DataOps DVC/titanic.csv -o data/titanic.csv
- Vérifions la présence du fichier : 
ls data
- Ajoutons le tracking de ce dataset avec DVC : 
dvc add data/titanic.csv
- Ajoutons le tracking git des deux fichiers créés suite à la commande précédente : 
git add data/titanic.csv.dvc data/.gitignore
- Si besoin:
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
- Faisons un commit : 
git commit -m "Add raw data"
- Ajoutons un tag:
git tag -a "v1" -m "Version originale"
- Voyons le contenu du fichier :
notepad data/titanic.csv.dvc

Dans GCP:
- Ensuite aller dans votre compte GCP, et créer un bucket et dossier 'data'
- Configurer votre bucket en accès public: aller dans 'Permissions' -> ajouter le rôle 'Storage Object User' pour le principal 'allUsers' -> Enregistrer
- Retourner dans la CLI et lancer la commande suivante, qui va ajouter un stockage par défaut (option -d) à DVC (remplacer l'ID par le vôtre):
dvc remote add -d myremote gs://<mybucket>/<path>

Dans Azure:
# Équivalent: Créer un container Azure au lieu d'un bucket GCP
az storage container create --name "votre-container" --account-name "votrecommptestorage"
# Activer le stockage public au niveau du comptde de stockage
# Activer l'accès public aux blobs
az storage account update \
    --name csb10032005097706b0 \
    --allow-blob-public-access true
# Équivalent: Configurer l'accès public
az storage container set-permission --name "votre-container" --public-access blob --account-name "votrecommptestorage"
# Équivalent de la commande DVC pour Azure
dvc remote add -d myremote azure://<nom-de-votre-conteneur>
Output: Setting 'myremote' as a default remote.

- Réalisons un git commit pour prendre en compte l'ajout du stockage distant dans le fichier de configuration de DVC:
git commit .dvc/config -m "Ajout stockage distant"
- Sachant que notre dataset sera sur GCP (ou Azure), et que notre projet (hormis le dataset) sera sur git, comment faire le lien entre les deux? I.e. comment, à partir du git, savoir où se trouve le dataset? La réponse est dans le fichier titanic.csv.dvc (qui se trouve dans le dossier 'data'), qui conserve cette information sur où le dataset est stocké, et que nous avons donc besoin de synchroniser sur le git. Par contre, avant de synchroniser le git avec le dépot distant, vérifions qu'il ne va pas synchroniser aussi le dataset, en vérifiant que celui-ci est bien mentionné dans le .gitignore:
notepad data/.gitignore
- On devrait y voir /titanic.csv
ls -lh data
- Maintenant que le stockage de data distant est configuré, réalisons un push (avec DVC!) du dataset pour l'y déposer: 
# Sur GCP:
dvc push
# Sur Azure:
administrateur@S109-05:~/TP1_DVC$ dvc remote modify myremote account_name '<nom-de-votre-compte-de-stockage>'
administrateur@S109-05:~/TP1_DVC$ dvc remote modify --local myremote  connection_string 'DefaultEndpointsProtocol=https;AccountName=<nom-de-votre-compte-de-stockage>;AccountKey=<votre-clé-de-compte-de-stockage>;EndpointSuffix=core.windows.net'
administrateur@S109-05:~/TP1_DVC$ dvc remote modify --local myremote sas_token '<clé-d'accès-partagé-de-votre-conteneur>'
administrateur@S109-05:~/TP1_DVC$ dvc push
Collecting                                                                            |1.00 [00:00,  243entry/s]
Pushing
1 file pushed  

GERER PLUSSIEURS VERSIONS DU DATASET:
- Modifions le jeu de données titanic.csv en local (par exemple en doublant sa taille, en copiant-collant toutes les lignes):
cat titanic.csv | tee -a titanic.csv > /dev/null
- Puis ajoutons cette nouvelle version à DVC avec:
dvc add data/titanic.csv
- DVC nous suggère de lancer la commande suivante pour suivre les changements dans git:
git add data/titanic.csv.dvc
- Réalisons un commit (rappel: le dataset est toujours exclu car mentionné dans le .gitignore):
git commit -m "MàJ dataset"
- Ajoutons un tag:
git tag -a "v2" -m "Version augmentée"
- Faisons le push DVC vers le bucket:
dvc push
- Voyons un résumé des commits jusque-là:
git log --oneline
- Comment revenir à une version précédente du dataset? Pour cela, revenons avec 'git ckeckout' à la version correspondante de titanic.csv.dvc:
git checkout HEAD~1 data/titanic.csv.dvc
- Puis:
dvc checkout
- Vérifions avec la commande suivante qu'on est bien revenu à la version précédente du dataset:
ls -lh data
- Si jamais nous voulons revenir à cette ancienne version, réalisons un commit:
git commit -m "Retour à la première version"
- A ce point il est clair que DVC ne fait pas à proprement parler du contrôle de version: c'est git qui le fait, et DVC étend les capacités de git aux datasets, grâce au fichier .dvc
- Créons un répo sur GitHub pour y mettre nos fichiers (hormis le dataset bien sûr):
git remote add origin https://github.com/mtaileb/tp_dvc.git
git branch -M main
git push -u origin main
